# c语言实现一个通讯录

      ```c

/**
 *开发环境：codeblock
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

typedef struct Sign
{
    char name[10];
    char phone[11];
    char birthday[8];
    char postcode[16];
    char address[10];
    char QQ[10];
    struct Sign* next;
}pe;
pe *p,*q,*h;

/**
 * 显示结点信息函数
 */
void showPeInfo(pe* p)
{
    if(p != NULL){
        printf("%-10s %-11s %-8s %-16s %-10s %-10s\n",p->name,p->phone,p->birthday,p->postcode,p->address,p->QQ);
    }
}

/**
 * 遍历链表信息，将所有结点信息都显示出来
 */
void showAllPeInfo(pe* h)
{
    while(h != NULL){
        showPeInfo(h);
        h = h-> next;
    }
}

void HeadShow()
{
    printf("                               通讯录管理                              \n");
    printf("-----------------------------------------------------------------------\n");
    printf("                                                                       \n");
}

void AllShow()
{
    HeadShow();
    printf("姓名\t   电话号码    生日     邮箱\t         住址\t    QQ号码\n");
    printf("-----------------------------------------------------------------------\n");
    showAllPeInfo(h);
    printf("\n");
}

/**
 *以追加的方式储存结点信息到指定文件
 */
void savePeInfo(pe* p)
{
    FILE* fp;
    if((fp=fopen("tongxunlu.txt","a"))== NULL){
        //a:文件必须存在，程序将在文件末尾“追加”或者说是写入数据
        printf("文件打开失败！\n");
    }
    //fprintf(fp, "%d", buffer); 将格式化的数据写入文件
    fprintf(fp,"%s\t",p->name);
    fprintf(fp,"%s\t",p->phone);
    fprintf(fp,"%s\t",p->birthday);
    fprintf(fp,"%s\t",p->postcode);
    fprintf(fp,"%s\t",p->address);
    fprintf(fp,"%s\n",p->QQ);
    fclose(fp);
}

/**
 * 读取文件信息，并按指定格式存放在结构体中
 * 返回该结构体的指针
 */
pe* loadPeInfo(FILE* fp) //用的是全局变量
{
    pe* p;
    p = (pe*)malloc(sizeof(pe));
    fscanf(fp,"%s\t",&p->name);
    if(feof(fp)){
        printf("文件为空！\n");
        p = NULL;
    } else {
        //fscanf从一个流中执行格式化输入,成功返回读入的参数的个数，失败返回EOF(-1)
        fscanf(fp,"%s\t",&p->phone);
        fscanf(fp,"%s\t",&p->birthday);
        fscanf(fp,"%s\t",&p->postcode);
        fscanf(fp,"%s\t",&p->address);
        fscanf(fp,"%s\n",&p->QQ);
        p->next = NULL;
    }
    return p;
}

void Menu()
{
    printf("                                     欢迎进入通讯录                                       \n");
    printf("                                                                                          \n");
    printf(" ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~  \n");
    printf("                                                                                          \n");
    printf("                               请输入序号选择您所需要的操作                               \n");
    printf("                                                                                          \n");
    printf("                                      1 信息录入                                          \n");
    printf("                                                                                          \n");
    printf("                                      2 信息查询                                          \n");
    printf("                                                                                          \n");
    printf("                                      3 信息查看                                          \n");
    printf("                                                                                          \n");
    printf("                                      4 信息修改                                          \n");
    printf("                                                                                          \n");
    printf("                                      5 退出系统                                          \n");
    printf("                                                                                          \n");
    printf(" ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~  \n");
}

/**
 *函数名: exit()
 *所在头文件：stdlib.h。
 *功能: 关闭所有文件，终止正在执行的进程。
 *exit(1)表示异常退出，这个1是返回给操作系统的。
 *exit(x)（x不为0）都表示异常退出。
 *exit(0)表示正常退出。
 */
//信息加载
void FileLoading()  //用的是全局变量
{
    FILE* fp;
    fp=fopen("tongxunlu.txt","r+");
    //r+:文件必须存在，程序可以读和写入数据到文件
    if(fp == NULL){
        printf("打开文件失败!\n");
        exit(1);
    }
    // 逐条读取数据存入链表中，h头指针，p当前结点
    p = loadPeInfo(fp);
    if(p != NULL){
        h=p;
    }
    // EOF = end of file
    while(!feof(fp)){
        q = loadPeInfo(fp);
        q->next=NULL;
        p->next=q;
        p=q;
        //p指向读取到的信息链表的最后一个节点
    }
    fclose(fp);
}

/**
 *while(1)中1代表一个常量表达式，永远不会等于0,
 *循环会一直执行下去,
 *除非你设置break等类似的跳出循环语句循环才会中止.
 */
// 录入信息
void InputInformation()  //用的是全局变量
{
    FILE* fp;
    char ch;
    if((fp=fopen("tongxunlu.txt","a"))==NULL){
        //a:文件必须存在，程序将在文件末尾“追加”或者说是写入数据
        printf("文件打开失败!\n");
        exit(1);
    }
    while(1){
        printf("请输入您要保存的好友的信息（您的所有好友的姓名不能重复呦~）：\n");
        q=(struct Sign *)malloc(sizeof(pe));
        q->next=NULL;
        printf("姓名："); scanf("%s",q->name);
        printf("电话号码："); scanf("%s",q->phone);
        printf("生日："); scanf("%s",q->birthday);
        printf("邮箱："); scanf("%s",q->postcode);
        printf("住址："); scanf("%s",q->address);
        printf("QQ号码："); scanf("%s",q->QQ);
        if(p == NULL){ // 说明之前文件为空，没有读取到信息，p为NULL
            h = p = q;
            p->next = NULL;
        }
        // 之前文件不为空，p指向读取到的信息链表的最后一个节点
        else {
            p->next = q;
            p = q;
        }
        savePeInfo(p);
        printf("输入 0 结束输入，非 0 则继续：\n");
        ch=getchar();
        if(getchar()=='0'){
            break;
        }
    }
    fclose(fp);
}

//信息查询
void CheckMenu()
{
    printf("                   通讯录                 \n");
    printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
    printf("                                          \n");
    printf("                1.查询                    \n");
    printf("                                          \n");
    printf("                2.退出查询系统            \n");
    printf("                                          \n");
    printf("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");
}

/**
 * 遍历链表与指定参数进行比较，返回匹配结点
 * 参数h    ：链表头结点
 * 参数name ：姓名
 * 参数phone：电话号码
 * 返回值：匹配结点，如没有匹配，返回NULL
 */
 pe* selectPeInfo(pe* h, char* name, char* phone){
    pe* p = NULL;
    while(h != NULL){
        if(name != NULL){
            if(strcmp(name,h->name) == 0){
                p = h;
                break;
            }
        }
        else if(phone != NULL){
            if(strcmp(phone,h->phone) == 0){
                p = h;
                break;
            }
        }
        h = h->next;
    }
    return p;
 }

/**
 * 查询函数
 */
void Find()
{
    FILE* fp;
    pe* sp = NULL;
    int key;
    printf("您可用   0姓名   1电话号码    来查询您要找的好友：\n");
    scanf("%d",&key);
    switch(key){
        case 0:
            char name[10];
            printf("请输入待查找姓名：");
            scanf("%s",name);
            sp = selectPeInfo(h,name,NULL);
            break;
        case 1:
            char phone[11];
            printf("请输入待查找号码：");
            scanf("%s",phone);
            sp = selectPeInfo(h,NULL,phone);
            break;
        default:
            printf("操作错误。\n");
            break;
    }
    if(sp != NULL) {
        printf("姓名\t   电话号码    生日     邮箱\t         住址\t    QQ号码\n");
        showPeInfo(sp);
    } else {
        printf("系统没有您输入的信息！\n");
    }
}

/**
 * 存储所有结点信息到指定文件（原文件会被清空重建）
 */
void saveAllPeInfo(pe* sh){
    FILE* fp;
    if((fp=fopen("tongxunlu.txt","w+"))== NULL){
        printf("文件打开失败！\n");
    }
    while(sh != NULL){
        //fprintf(fp, "%d", buffer); 将格式化的数据写入文件
        fprintf(fp,"%s\t",sh->name);
        fprintf(fp,"%s\t",sh->phone);
        fprintf(fp,"%s\t",sh->birthday);
        fprintf(fp,"%s\t",sh->postcode);
        fprintf(fp,"%s\t",sh->address);
        fprintf(fp,"%s\n",sh->QQ);
        sh = sh->next;
    }
    fclose(fp);
}

/**
 * 删除结点函数
 * 参数为待删除结点
 */
void Delete(pe* pp){ //用的是全局变量
    pe* q = h;//定义一个q，让它去找pp结点的前一个结点
    // 第一种情况，删除结点为头结点
    if(pp == h){
        h = h->next; // 头指针指向头结点下一个结点
        free(pp); // 释放待删除（头）结点pp
    } else {
        // 第二种情况，待删除结点不为头结点
        while(q != NULL) { // 对链表进行遍历，找到待删除结点的前项结点
            if(q->next == pp) {
                    q->next = pp->next; // 待删除结点的前向结点指向待删除结点的next
                    free(pp); // 释放待删除结点pp
            }
                q = q->next;
        }
    }
}

//信息修改
void ChangeInformation()
{
    pe* cp = NULL; // change pe
    char changename[10];
    HeadShow();
    printf("请输入您要修改资料的联系人的姓名：");
    scanf("%s",changename);
    cp = selectPeInfo(h,changename,NULL);
    if(cp == NULL) {
        printf("抱歉，系统中没有该联系人信息！");
    } else {
        printf("您要修改的联系人为:\n");
        showPeInfo(cp); // 显示待修改结点信息
        int m;
        printf("请确认您要修改的是这条记录吗？   0:否   1:是\n");
        scanf("%d",&m);
        switch(m) {
            case 0: break;
            case 1:
                printf("请选择您所需的操作    0:删除   1:修改\n");
                int key;
                scanf("%d",&key);
                switch(key){
                    case 0:
                        Delete(cp);
                        break;
                    case 1:
                        printf("请输入您要修改成的信息：\n");
                        printf("姓名：");
                        scanf("%s",&cp->name);
                        printf("电话号码：");
                        scanf("%s",&cp->phone);
                        printf("生日：");
                        scanf("%s",&cp->birthday);
                        printf("邮箱：");
                        scanf("%s",&cp->postcode);
                        printf("住址：");
                        scanf("%s",&cp->address);
                        printf("QQ号码：");
                        scanf("%s",&cp->QQ);
                        break;
                    default:
                        break;
                }
            default:
                break;
        }
    }
    saveAllPeInfo(h); // 存储所有结点信息，更新文件
}

void Exit()
{
    printf("~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n");
    printf("                                                                 \n");
    printf("                                                                 \n");
    printf("                        欢迎下次使用，再见。                     \n");
    printf("                                                                 \n");
    printf("                                                                 \n");
    printf("~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~\n");
}
int main()
{	int key;
	int check_key;
	FileLoading();
	while(1){
	    Menu();
	    printf("请根据菜单上的操作序号选择您所需的操作：");
	    scanf("%d",&key);
	    switch(key){
            case 1:
                InputInformation();
                break;
            case 2:
                while(1){
                    CheckMenu();
                    printf("请输入您所需的操作的序号：");
                    scanf("%d",&check_key);
                    if(check_key==1){
                        Find();
                    }
                    else if(check_key==2){
                        break;
                    }
                    else{
                        printf("操作错误。请重新输入！\n");
                        getchar();
                    }
                }
                break;
            case 3:
                AllShow();
                break;
            case 4:
                ChangeInformation();
                break;
            case 5:
                Exit();
                exit(0);
            default:
                printf("输入有误。请输入正确的操作序号！\n");
                break;
        }
        system("pause"); // 暂停程序的执行，按任意键恢复执行
	}
    return 0;
}

      ```
